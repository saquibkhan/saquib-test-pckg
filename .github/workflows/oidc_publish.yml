# This is a basic workflow to help you get started with Actions

name: OIDC_Publish

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Set Up Node.js Environment
        uses: actions/setup-node@v4
  
      - name: Verify Node.js and npm installation
        run: |
          echo "Node.js version:"
          node -v
          echo "npm version:"
          npm -v

      - name: Get package name from workflow context
        id: get_package_name
        run: |
          echo "Package name from workflow context: `${{ github.event.inputs.package_name }}`"
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}" >> $GITHUB_ENV
        
      - name: Set environment variables for registry
        id: set_env
        run: |
          echo "REGISTRY_URL=https://registry.npmjs.org" >> $GITHUB_ENV
          echo "AUDIENCE=npm:registry.npmjs.org" >> $GITHUB_ENV
          echo "TOKEN_EXCHANGE_URL=https://registry.npmjs.org/-/npm/v1/oidc/token/exchange/package" >> $GITHUB_ENV
          echo "WORKING_DIRECTORY=$(basename ${{ github.event.inputs.package_name || 'saquib-test-pckg/saquib-test-pckg' }})" >> $GITHUB_ENV
      
      - name: Extract Package Name from package.json
        if: ${{ github.event.inputs.package_name == '' }}
        id: extract_package_name
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # PACKAGE_NAME=$(jq -r '.name' < package.json)
          PACKAGE_NAME="saquib-test-pckg"
          echo "📦 Package Name: $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Request OIDC IdP Token from GitHub
        id: request_oidc_idp_token
        run: |
          echo "🔐 Requesting OIDC IdP token for audience: $AUDIENCE"
          CURL_RESPONSE=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=$AUDIENCE")
          
          echo "OIDC Token Response:"
          echo "$CURL_RESPONSE"
          ID_TOKEN=$(echo "$CURL_RESPONSE" | jq -r '.value')
          if [ -z "$ID_TOKEN" ] || [ "$ID_TOKEN" == "null" ]; then
            echo "❌ Error: Failed to retrieve ID token."
            exit 1
          fi
          echo "✅ Successfully retrieved OIDC ID token."
          echo "ID_TOKEN=$ID_TOKEN" >> $GITHUB_ENV
        
        # Retrieves OIDC token and stores it for next step
  
      - name: Exchange OIDC Token for npm Token
        id: exchange_oidc_token
        run: |
          echo "🔄 Exchanging OIDC ID token for short-lived npm token..."

          PACKAGE_NAME="saquib-test-pckg"
          
          # URL encode the package name (especially important for scoped packages with @scope/name)
          ENCODED_PACKAGE_NAME=$(echo "$PACKAGE_NAME" | sed 's#/#%2f#g')
          echo "Encoded package name: $ENCODED_PACKAGE_NAME"
          
          # Update the token exchange URL to include package name
          TOKEN_EXCHANGE_URL_WITH_PKG="${TOKEN_EXCHANGE_URL}/${ENCODED_PACKAGE_NAME}"
          echo "Using token exchange URL: $TOKEN_EXCHANGE_URL_WITH_PKG"
          
          CURL_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: $ID_TOKEN" \
            "$TOKEN_EXCHANGE_URL_WITH_PKG")
          echo "npm Token Exchange Response:"
          echo "$CURL_RESPONSE"
          npm_TOKEN=$(echo "$CURL_RESPONSE" | jq -r '.token')
          if [ -z "$npm_TOKEN" ] || [ "$npm_TOKEN" == "null" ]; then
            echo "❌ Error: Failed to retrieve npm token."
            exit 1
          fi
          echo "✅ Successfully retrieved npm token."
          echo "npm Token: $npm_TOKEN"
          echo "npm_TOKEN=$npm_TOKEN" >> $GITHUB_ENV
          # Exchanges OIDC token for a publishable npm token
  
      - name: Save npm token to file
        run: |
          echo "$npm_TOKEN" > npm_token.txt
        
      - name: Upload npm token artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-token
          path: npm_token.txt
  
      - name: Configure npm Auth and Publish Package
        working-directory: ${{ github.event.inputs.package_name == '' && env.WORKING_DIRECTORY || format('saquib-test-pckg/saquib-test-pckg/{0}', github.event.inputs.package_name) }}
        env:
          NODE_AUTH_TOKEN: $npm_TOKEN
        run: |
          echo "🔧 Setting npm auth token and publishing..."
          
          echo "" > "$(npm config get userconfig)"
          npm config set //registry.npmjs.org/:_authToken "$npm_TOKEN"
          echo "🧾 npm config:"
          npm config list
          # Update package.json version if package_version input is provided
          if [ "${{ github.event.inputs.package_version }}" != "" ]; then
            echo "📦 Updating package version to ${{ github.event.inputs.package_version }}"
            npm version --no-git-tag-version ${{ github.event.inputs.package_version }}
          fi
          if [ "${{ github.event.inputs.npm_publish_flags }}" != "" ]; then
            echo "🚀 Running npm publish with extra flags: ${{ github.event.inputs.npm_publish_flags }}"
          else
          echo "🚀 Running npm publish"
          fi
          npm publish ${{ github.event.inputs.npm_publish_flags }}
          echo "✅ Package published successfully."
